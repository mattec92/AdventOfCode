package se.mattec.advent2018

fun main() {
    println(Day18.problem1())
    println(Day18.problem2())
}

object Day18 {

    fun problem1(): Int {
        return getResourceValue(10)
    }

    //Sum starts repeating sometime after ~400 minutes
    //Value repeats every 28 minutes
    fun problem2(): Int {
        val rest = 1000000000 % 28 //Number of minutes past 28 repetition offset
        return getResourceValue(20 * 28 + rest) // 20 * 58 is a repeating number. Now only add the offset.
    }

    private fun getResourceValue(minutes: Int): Int {
        val map = data

        val maxX = map[0].size
        val maxY = map.size

        var previous = map
        for (i in 0 until minutes) {
            val next = Array(maxY) { CharArray(maxX) { '-' } }
            for (y in 0 until maxY) {
                for (x in 0 until maxX) {
                    val surrounding = surrounding(previous, x, y)
                    when (previous[y][x]) {
                        '.' -> next[y][x] = if (surrounding.count { it == '|' } >= 3) '|' else '.'
                        '|' -> next[y][x] = if (surrounding.count { it == '#' } >= 3) '#' else '|'
                        '#' -> next[y][x] = if (surrounding.any { it == '#' } && surrounding.any { it == '|' }) '#' else '.'
                    }
                }
            }
            previous = next

            val acres = previous.flatMap { it.toList() }
            val sum = acres.count { it == '#' } * acres.count { it == '|' }
            println("$i: $sum")
        }

        val acres = previous.flatMap { it.toList() }

        return acres.count { it == '#' } * acres.count { it == '|' }
    }

    private fun surrounding(map: Array<CharArray>, x: Int, y: Int): List<Char> {
        val output = mutableListOf<Char>()
        for (xx in x - 1..x + 1) {
            for (yy in y - 1..y + 1) {
                if (!(xx == x && yy == y)) {
                    try {
                        output += map[yy][xx]
                    } catch (e: IndexOutOfBoundsException) {
                    }
                }
            }
        }
        return output
    }

    private fun print(map: Array<CharArray>) {
        for (y in 0 until map.size) {
            val row = map[y]
            for (x in 0 until row.size) {
                print(row[x])
            }
            println()
        }
        println()
    }

    private val data = """
.#||#|||##....|..#......|..#...##..|#....#|.......
|..#..#....|.#|.|......||.|..#|...||#......|.....|
..#|##.#.#.##...#..........#.#|...||.|..|##.#.|.||
|.#.#|#.#.||...|...|||#|.#..#|..|#.#..##.|......#|
#..|#|........|......##.|##..|..#|...#||.......|#.
#...|#..#......##...##.|......|.#|#.|..|#.|#...|.#
|#.....|.|.###..#...|....|..|.....|#..#..|.......#
.....##.|........|...#...|#..|..##...|......||.|..
#....#..|..#.........||.##..##|#.##.#....|...#.|.|
...|..#.|.|#||..|#.||.....#|.#|.|#|.....#|#.###|##
...|..#.||....||.#.|....|#...#|.||#.#..#...#...##.
...||.|#......|...|#...#..|...||..|.#|.....##.|||.
...|.#|.|#.|...#.....|.|...#|.|.........|||.|.##.|
..|..|#..|........#.|#.||.#|..#.|....||...|.|.#...
.|.|...#.|.#..........|..|........#|.|....|..|....
|...|.#..|..||#.||#........|...|.|.|..|.#|..|...|.
..#.#..#|......#|.#....###...#.#..|..|.....|....#.
..|||..#...|#|.##..#|#.#.#..|......#.....||.##.##.
...|...#.|##..|..|.|.#.|||#|......|.|..|.||#.#..||
||.....|..#|.#...|.|.#.||.....##...|.#...|#.#.##..
.|.|.#|..#........#..||.|.#|...###|.#..#........||
|.##......|.|||..|...##.|.....#|||....#...#||||.|.
...#...|||.......#..|.#.||.|.......|#|..|..#.|....
|..|#.............|...##|....|.#|..|#...|#...|.|..
|.|....|#...|##...#.....|..|..|...||#..|...|.#..||
...|.##.##....#.|#......##|...|..#.#....||||.||||.
||.#....#..#...|.||||##.....#..##......#..||##.#..
........#....|..#..#|#|....#..|..#.....##|...#.|..
..#.|#.|.#.#..#.....|..#...###....|#...........#.|
#.|#|.#...|.#.#.|..|....|..|.|.#|.#|#.............
.||......|||||...||.#......|#...|#.|.|..#.|.#|....
|.#|.#.|#.#..#.##......#.#|#.....#..#....#.##|.#..
#.#..|....###..|..|.||..|#..|...|...#|##....|#.#..
.|#...|..#|..#.|||.|..||...|..#.#...|..|#......#..
.##...#||..|#.#...|.......|.##.....|..|.#..|.#.|.#
#||##....#.|.||.#....|.#|..|.|.#....#..#...||.....
......||.#|........#....||.##...#....|.||...|..##|
#........|..#|.......#.#.#|..|...#..||||...|.....#
....#||.##....|..##...##|.....|..#.#.....#..|.....
.|.|#....|..|.#|#....#..|...|..#|#...#.||...#.#...
#....|.|#||....#.#|#|.#..|.#.....##........|...|#.
#...#...|..|.#....|..|.#....#.|#...#...#|.|.#.....
....#.......#....##|.#.|....##..|||##.....#|.....#
.....||||..|.#|#..|...|.#..|...#|...|.##||.#||....
.||....#...|..#.|#.#.|#|#|..#.........##...||..|#.
...|.#.#..........##...#|...|.##.|.|.||.#......#..
...###.#..|..#.....#|#.#.|#.######|.|#.....###.|.#
..##.....##...|..|....#|..||....|.|....#..|...|..#
.|.##.#...|.|.||.||.|#.#.....||#.#|.#|.|..#|.#..|#
.|...............#.#..#.##......#|||.|..||..#....#
    """.trimIndent()
            .split("\n")
            .map { it.toCharArray() }
            .toTypedArray()

}