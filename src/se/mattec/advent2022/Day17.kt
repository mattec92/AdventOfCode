package se.mattec.advent2022

fun main(args: Array<String>) {
    println(Day17.problem1())
    println(Day17.problem2())
}

object Day17 {

    fun problem1(): String {
        var cave = initialCave.toList()

        val rocks = listOf(rock1, rock2, rock3, rock4, rock5)
        var currentRockIndex = 0

        val jetDirections = data
        var currentJetDirectionIndex = 0

        for (i in 0 until 2022) {
            // Make sure cave starts 3 above last item
            cave = (initialCave + cave.dropWhile { it == "......." }).toMutableList()

            // Add new rock to the top of the cave
            cave.addAll(0, rocks[currentRockIndex])

            var needsSettle: Boolean
            do {
                when (jetDirections[currentJetDirectionIndex]) {
                    '<' -> cave = pushLeft(cave)
                    '>' -> cave = pushRight(cave)
                }

                val preDropDownCave = cave
                cave = dropDown(cave)

                needsSettle = preDropDownCave == cave

                currentJetDirectionIndex = ++currentJetDirectionIndex % jetDirections.size
            } while (!needsSettle)

            cave = settle(cave)

            currentRockIndex = ++currentRockIndex % rocks.size
        }

        return cave.count { it.contains("#") }.toString()
    }

    private fun printCave(cave: List<String>) {
        cave.forEach {
            println(it)
        }
    }

    fun problem2(): String {
        var cave = initialCave.toList()

        val rocks = listOf(rock1, rock2, rock3, rock4, rock5)
        var currentRockIndex = 0

        val jetDirections = data
        var currentJetDirectionIndex = 0

        val heightByRockNumber = mutableMapOf<Int, Int>()

        for (i in 0 until 2022) {
            // Make sure cave starts 3 above last item
            cave = (initialCave + cave.dropWhile { it == "......." }).toMutableList()

            // Add new rock to the top of the cave
            cave.addAll(0, rocks[currentRockIndex])

            var needsSettle: Boolean
            do {
                when (jetDirections[currentJetDirectionIndex]) {
                    '<' -> cave = pushLeft(cave)
                    '>' -> cave = pushRight(cave)
                }

                val preDropDownCave = cave
                cave = dropDown(cave)

                needsSettle = preDropDownCave == cave

                currentJetDirectionIndex = ++currentJetDirectionIndex % jetDirections.size
            } while (!needsSettle)

            cave = settle(cave)

            currentRockIndex = ++currentRockIndex % rocks.size

            heightByRockNumber[i + 1] = cave.count { it.contains("#") }
        }

        var repetitionStart: Int = -1
        var repetitionRestart: Int = -1
        outer@ for (i in cave.size - 1 downTo 20) {
            val subList = cave.subList(i - 20, i)

            for (j in cave.size - 1 - 20 downTo 20) {
                if (i == j) continue
                val comparisonSubList = cave.subList(j - 20, j)
                if (subList == comparisonSubList) {
                    repetitionStart = i
                    repetitionRestart = j
                    break@outer
                }
            }
        }

        if (repetitionStart == -1) {
            throw IllegalStateException("No answer")
        }

        val heightAtRepetitionStart = cave.size - repetitionStart

        val rockNumberByHeight = heightByRockNumber.entries.groupBy({ it.value }) { it.key }
        val repetitionStartNumberOfRocks = rockNumberByHeight[cave.size - repetitionStart]!!.max()
        val repetitionRestartNumberOfRocks = rockNumberByHeight[cave.size - repetitionRestart]!!.max()

        val desiredNumberOfRocks = 1_000_000_000_000L
        val rocksPerRepetition = repetitionRestartNumberOfRocks - repetitionStartNumberOfRocks
        val heightPerRepetition = repetitionStart - repetitionRestart
        val repetitions = desiredNumberOfRocks / rocksPerRepetition

        val additionalRocksNeeded =
            desiredNumberOfRocks - repetitionStartNumberOfRocks - repetitions * rocksPerRepetition
        val additionalHeight =
            heightByRockNumber[repetitionStartNumberOfRocks + additionalRocksNeeded.toInt()]!! - heightAtRepetitionStart

        return (heightAtRepetitionStart + repetitions * heightPerRepetition + additionalHeight).toString()
    }

    private fun pushLeft(cave: List<String>): List<String> {
        val movableRockRows = cave
            .mapIndexed { index, s -> s to index }
            .filter { it.first.contains("@") }

        val canMove = movableRockRows.all {
            val rockIndex = it.first.indexOf('@')
            rockIndex != 0 && it.first[rockIndex - 1] != '#'
        }

        return if (canMove) {
            val movedRockRows = movableRockRows.map {
                var row = it.first
                val firstIndex = row.indexOf('@')
                val lastIndex = row.lastIndexOf('@')

                for (i in firstIndex - 1 until lastIndex) {
                    row = row.replaceRange(i, i + 1, row[i + 1].toString())
                }

                row = row.replaceRange(lastIndex, lastIndex + 1, ".")

                row to it.second
            }

            cave.mapIndexed { index, s ->
                val replacedRow = movedRockRows.find { it.second == index }
                replacedRow?.first ?: s
            }
        } else {
            cave
        }
    }

    private fun pushRight(cave: List<String>): List<String> {
        val movableRockRows = cave
            .mapIndexed { index, s -> s to index }
            .filter { it.first.contains("@") }

        val canMove = movableRockRows.all {
            val rockIndex = it.first.lastIndexOf('@')
            rockIndex != it.first.length - 1 && it.first[rockIndex + 1] != '#'
        }

        return if (canMove) {
            val movedRockRows = movableRockRows.map {
                var row = it.first
                val firstIndex = row.indexOf('@')
                val lastIndex = row.lastIndexOf('@')

                for (i in lastIndex + 1 downTo firstIndex + 1) {
                    row = row.replaceRange(i, i + 1, row[i - 1].toString())
                }

                row = row.replaceRange(firstIndex, firstIndex + 1, ".")

                row to it.second
            }

            cave.mapIndexed { index, s ->
                val replacedRow = movedRockRows.find { it.second == index }
                replacedRow?.first ?: s
            }
        } else {
            cave
        }
    }

    private fun dropDown(cave: List<String>): List<String> {
        val firstIndex = cave.indexOfFirst { it.contains("@") }
        val lastIndex =
            cave.indexOfLast { it.contains("@") } + 1 // Also get one row with potential settled material

        if (lastIndex >= cave.size) {
            return cave
        }

        val movableRockRows = cave.subList(firstIndex, lastIndex + 1).toMutableList()

        var canMove = true
        outer@ for (rowIndex in movableRockRows.size - 1 downTo 1) {
            val row = movableRockRows[rowIndex - 1]
            val rowBelow = movableRockRows[rowIndex]

            for (charIndex in row.indices) {
                if (row[charIndex] == '@' && rowBelow[charIndex] == '#') {
                    canMove = false
                    break@outer
                }
            }
        }

        return if (canMove) {
            outer@ for (rowIndex in movableRockRows.size - 1 downTo 1) {
                var row = movableRockRows[rowIndex - 1]
                var rowBelow = movableRockRows[rowIndex]

                row.forEachIndexed { index, c ->
                    if (c == '@') {
                        rowBelow = rowBelow.replaceRange(index, index + 1, "@")
                        row = row.replaceRange(index, index + 1, ".")
                    }
                }

                movableRockRows[rowIndex - 1] = row
                movableRockRows[rowIndex] = rowBelow
            }

            cave.mapIndexed { index, s ->
                if (index in firstIndex..lastIndex) {
                    movableRockRows[index - firstIndex]
                } else {
                    s
                }
            }
        } else {
            cave
        }
    }

    private fun settle(cave: List<String>): List<String> {
        return cave.map { it.replace("@", "#") }
    }

    private val data = """

    """.trimIndent()
        .toList()

    private val rock1 = """
..@@@@.
    """.trimIndent().split("\n")

    private val rock2 = """
...@...
..@@@..
...@...
    """.trimIndent().split("\n")

    private val rock3 = """
....@..
....@..
..@@@..
    """.trimIndent().split("\n")

    private val rock4 = """
..@....
..@....
..@....
..@....
    """.trimIndent().split("\n")

    private val rock5 = """
..@@...
..@@...
    """.trimIndent().split("\n")

    private val initialCave = listOf(".......", ".......", ".......")

}